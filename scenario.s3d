SET CAMERA_FOV  = 60;
SET CAMERA_NEAR = 0.3;
SET CAMERA_FAR  = 300;
SET CAMERA_HEIGHT = 1.5;


class scenario 
{	
	//variables
	var floorMesh;
	var floorObj;
	var floorMat;
	var floorTexture;
	
	var wallMesh;
	var wallObjArray;
	var wallMat;
	var wallTexture;
	var levelMatrix;
	var rows;
	var columns;
	
	//array di giocatori
	var playerArray;
	//numero di giocatori presenti
	var playerNumber;
	var camera;
	var isFirstPersonCamera;
	
	//functions
	init(textfile);	
	addplayer(col);
	update();
	draw();
	updateCamera();
};

//********************************************************************
//INIT SCENARIO
//********************************************************************

function scenario :: init(textfile){
	playerNumber = 0;
	playerArray = array(0);
	
	//load scenario
	if (!FileExist(textfile)) {
		trace(textfile);
	}
	var lines = LoadFile(textfile);
	rows = len(lines) ;
	columns = len(lines[0]);
	
	//create level matrix
	levelMatrix = array(rows);
	for (var i = 0; i < rows; i++){
		levelMatrix[i] = array(columns);
	}
	
	for (var i=0; i<rows; i++)
		for (var j=0; j<columns; j++)
			levelMatrix[i][j] = 0;
			
	//set textures and stuff
	
	//floors
	
	floorMat = CVmMaterial();
	floorTexture = CVmTexture("ground_texture.jpg");
	floorMat.SetTexture(floorTexture);
	floorMat.ChangeTextureParams(VR_U_TILING,10);
	floorMat.ChangeTextureParams(VR_V_TILING,10);
	
	floorMesh = CVmNewMesh(VRP_BOX);
	floorMesh.Scale(columns,1,rows);
	floorMesh.ForceMaterial(floorMat);
	
	floorObj = CVmObj(floorMesh);
	floorObj.translate(0,-1,0);
	
	//walls
	
	wallMat = CVmMaterial();
	wallTexture = CVmTexture("brick.jpg");
	wallMat.SetTexture(wallTexture);
	wallMat.ChangeTextureParams(VR_V_TILING,3);
	
	wallMesh = CVmNewMesh(VRP_BOX);
	wallMesh.Scale(1,3,1);
	wallMesh.ForceMaterial(wallMat);
	
	wallObjArray = Array(0);
	
	var i,j;
	
	for (i=0; i<rows; i++)
		for (j=0; j<columns; j++)
		{
			if (lines[i][j] == "*")
			{
				levelMatrix[i][j] = 1;
				var tempobj = CVmObj(wallMesh);
				tempObj.SetPosition(j,0,i);
				aadd(wallObjArray,tempObj);				
			}
		}
	
	/*init camera */		
	camera = CameraGetCurrent();		
	isFirstPersonCamera = true;
	camera.SetFovY(CAMERA_FOV);
	camera.SetZNear(CAMERA_NEAR);
	camera.SetZFar(CAMERA_FAR);
}

//********************************************************************
//DRAW
//********************************************************************

function scenario :: draw()
{
	floorObj.Draw();
	
	var i;
	for (i = 0;i < len(wallObjArray); i++)
		wallObjArray[i].Draw();
		
	for (i = 0;i < playerNumber; i++)
		playerArray[i].Draw();	
}

//********************************************************************
//ADD ONE PLAYER
//********************************************************************

function scenario :: addPlayer(col){
	if (col == VOID) {
		col = [rand(255)/255.0,rand(255)/255.0,rand(255)/255.0];
	}
	
	var tmpPlayer = player();
	var pos, posx, posz;
	/*spawn outside walls */
	do {		
		posx = rand(columns - 1);
		trace(posx);
		posz = rand(rows - 1);
		trace(posz);
		pos = [posx, 0, posz];
	}
	while(levelMatrix[posz][posx] == 1);
	
	tmpPlayer.init(playerNumber,col,pos, levelMatrix);
	aadd(playerArray, tmpPlayer);
	playerNumber++;
}

//********************************************************************
//UPDATE SCENARIO
//********************************************************************

function scenario :: update(){
	
	if (KeyPressed("C")) {
		isFirstPersonCamera = false;
	}
	if (KeyPressed("X")) {
		isFirstPersonCamera = true;
	}
	if(keyPressed("P")) {
		//ShowCursor(TRUE);
	}
	
	/*update players */
	for (var i = 0; i < playerNumber; i++){
		playerArray[i].update(levelMatrix);
	}
	
	updateCamera();
	
	//do some other stuff
}

//********************************************************************
//UPDATE CAMERA
//********************************************************************

function scenario :: updateCamera(){

	var normal = VectorRotate(-90, [0, 1, 0], playerArray[0].direction.x_z);
	var camPos = playerArray[0].position + [0, 1, 0] +
			    VectorRotate(playerArray[0].angleX, normal, [0, 0.5, 0]);

	camera.SetPosition(camPos);
	camera.SetDirection(playerArray[0].direction);
	//camera.RotateLocal(-playerArray[0].angleX, [1,0,0]);
	
	if(!isFirstPersonCamera){
		var camPos = camera.GetPosition();
		var camDir = camera.GetDirection();
		camPos += [0,0.25,0];
		camPos += VectorRotate(190, Camera.GetYAxis(), camDir) * 2;
		camera.SetPosition(camPos); 
	}
}
