/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "bullet.s3d"
#include "player.s3d"
#include "scenario.s3d"
#include "weapon.s3d"
#include "network.s3d"

/* Set global scene parameters */
SET AUDIO_OPENAL = 1;
SET LOGIN_TIMEOUT = 2000;

/* Light globals */
var Light0;
var PosL = [16.0, 10.0, 16.0];

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);
function showCrosshair();
function showStats();
function showScores();
function drawMenu();

var level;
var myPlayer;
var playerID = 0;
var enemyNumber = 0;
var loginTimer = 0;
var showMenu = true;

function OnDownload() {
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}

function OnInit(params) {
	
	var w = CVmIEWindow();	
	w.Navigate("index.html");

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	
	setFrameRate(60);
	
	networkInit();

	// TODO: put your initialization code here
	level = scenario();
	level.init("level.txt");
	
	while(getTime() - loginTimer < LOGIN_TIMEOUT){ 
		var data = networkReceive();
		if(data!= void) {
			/*someone's online */
			if (data[0] == HEARTBEAT_PDU){
				var tmpEnemy = level.getEnemyByID(data[1]);
				if (tmpEnemy == null) {
					/*new player*/
					Outputln("adding enemy");
					var e = level.addPlayer(data[1], [data[2],data[3], data[4]], level);
					level.addEnemy(e);
					enemyNumber++;	
				}
			}
		}
	}

	Outputln("login terminato");
	playerID = enemyNumber + 1;
	trace(playerID);
	myPlayer = level.addPlayer(playerID, [11,5,0], level);
	myPlayer.local = true;
	level.myPlayer = myPlayer;

	/* 
	enemy1 = level.addPlayer();
	level.addEnemy(enemy1);
	enemy2 = level.addPlayer();
	level.addEnemy(enemy2);
	*/
	ShowCursor(FALSE);
	ShowCursor(FALSE);
}

function showCrosshair()
{
	ConsoleColor([1, 1, 1]);
	ConsoleLines([0.5, 0.47, 0.5, 0.53]);
	ConsoleLines([0.48, 0.5, 0.52, 0.5]);
}

function drawMenu() {
	var x = 0.3;
	var y = 0.8;
	ConsoleColor([0.18,0.18,0.18]);
	ConsoleFilledRect (0.15, 0.9, 0.68, 0.8);
	ConsoleColor([0.93, 0.92, 0.55]);
	ConsoleFont("Tahoma", 60);
	ConsoleText(x + 0.05, y , "CONTROLS" );
	ConsoleLines([x - 0.13 , y - 0.03, x + 0.51, y- 0.03 ]);
	ConsoleFont("Arial", 20);
	ConsoleText(x - 0.1, y - 0.07 , "Left Mouse Button" );
	ConsoleText(x + 0.3, y - 0.07 , "Shoot" );
	ConsoleText(x - 0.1, y - 0.11 , "Spacebar" );
	ConsoleText(x + 0.3, y - 0.11 , "Jump" );
	ConsoleText(x - 0.1, y - 0.15 , "1" );
	ConsoleText(x + 0.3, y - 0.15 , "Change Weapon" );
	ConsoleText(x - 0.1, y - 0.19 , "R" );
	ConsoleText(x + 0.3, y - 0.19 , "Reload" );
	ConsoleText(x - 0.1, y - 0.23 , "W" );
	ConsoleText(x + 0.3, y - 0.23 , "Walk Forward" );
	ConsoleText(x - 0.1, y - 0.27 , "S" );
	ConsoleText(x + 0.3, y - 0.27 , "Walk Backwards" );
	ConsoleText(x - 0.1, y - 0.31 , "A" );
	ConsoleText(x + 0.3, y - 0.31 , "Walk Left" );
	ConsoleText(x - 0.1, y - 0.35 , "D" );
	ConsoleText(x + 0.3, y - 0.35 , "Walk right" );
	ConsoleText(x - 0.1, y - 0.39 , "SHIFT" );
	ConsoleText(x + 0.3, y - 0.39 , "Run" );	
	ConsoleText(x - 0.1, y - 0.43 , "T" );
	ConsoleText(x + 0.3, y - 0.43 , "Third Person Camera" );
	ConsoleText(x - 0.1, y - 0.47 , "F" );
	ConsoleText(x + 0.3, y - 0.47 , "First Person Camera" );
	ConsoleLines([x - 0.13 , y - 0.5, x + 0.51, y- 0.5 ]);
	ConsoleText(0.35, y - 0.6 , "PRESS ENTER TO CONTINUE" );
}

function showStats() {
	var remainingHealth = myPlayer.health;
	var x = 0.035;
	var y = 0.95;
	var width = 0.4;
	var height = 0.05;
	ConsoleFont("Arial", 20);
	ConsoleColor([1,1,1]);
	ConsoleText(0.08, 0.93, str(remainingHealth) + "/"+ str(MAX_HEALTH) );
	ConsoleFilledRect (x, y, 0.03, 0.01);
	ConsoleFilledRect (x + 0.01, y + 0.012, 0.01, 0.035);
	if (!myPlayer.isReloading){
		ConsoleText(0.08, y - 0.07, str(myPlayer.weapons[myPlayer.currWeapon].bullets) + " / "+ str(myPlayer.magazines[myPlayer.currWeapon]) );
	}
	else {
		ConsoleText(0.08, y - 0.07, "-- / "+ str(myPlayer.magazines[myPlayer.currWeapon]) );
	}
	
	ConsoleText(x, 0.05, "SCORE: " + str(myPlayer.score));
}

function showScores() {
	var x = 0.75;
	var y = 0.95;
	ConsoleFont("Arial", 20);
	ConsoleColor([0.86,0.85,0.86]);

	ConsoleText(x, y , "Player ID: " + str(level.myPlayer.ID) + "   "+ "Score: " + str(level.myPlayer.score));
	ConsoleLines([x, y - 0.01, x + 0.2, y - 0.01]);
	y-= 0.05;
	foreach (var e in level.enemies) {
		ConsoleText(x, y , "Player ID: " + str(e.ID) + "   "+ "Score: " + str(e.score));
		ConsoleLines([x, y - 0.01, x + 0.2, y - 0.01]);
		y-= 0.05;
	}
}

function OnFrame() {
	/* manage camera */
	//CameraMoveMouse();
	
	if(showMenu) {
		drawMenu();
		if(Keypressed(VK_RETURN)) {
			showMenu = false;
		}
	}
	
	else {
		level.update();
		showCrosshair();
		showStats();
		SceneBegin();
		// TODO: put your drawing code here
		level.draw();
		if(Keypressed(VK_CONTROL)) {
			showScores();
		}
		
		//keep cursor centered
		SetCursorPos(0.5, 0.5);
		SceneEnd();
	}
		
}

function DownloadReady(RequestID) {
	// TODO
}



function OnTimer() {
	// TODO:
}


function OnEvent(eventID, wparam, lparam) {
	// TODO: put your events handling code here
}

function OnError() {
	// TODO: put your errors handling code here
}


function OnExit() {
	// TODO: put your cleanup code here
	var PDU = Array(2);
	PDU[0] = DISCONNECT_PDU;
	PDU[1] = myPlayer.ID;
	
	networkSend(PDU);
}


function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}



