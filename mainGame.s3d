/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "bullet.s3d"
#include "player.s3d"
#include "scenario.s3d"
#include "weapon.s3d"
#include "network.s3d"

/* Set global scene parameters */
SET AUDIO_OPENAL = 1;
SET LOGIN_TIMEOUT = 2000;
SET SPAWN_TIME = 5000;

/* Light globals */
var Light0;
var AmbientLight;
var PosL = [16.0, 10.0, 16.0];
var AmbientPos = [0, 20, 0];

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);
function showCrosshair();
function showStats();
function showBar();
function showScores();
function drawMenu();
function drawRect(minx, miny, maxx, maxy);
function updateScreen();
function updateBlood();

var level;
var myPlayer;
var playerID = 0;
var enemyNumber = 0;
var loginTimer = 0;
var showMenu = true;
var enemyLastId = 0;
var hText;
var bText;
var cText;
var mText;
var dText;
VAR h90;
var grabMouse = false;
var deathTimer;

function OnDownload() {
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}

function maxID() {
	var ID = 0;
	foreach(var e in level.enemies) {
		if(e.ID > ID){
			ID = e.ID;
		}
	}
	return ID;
}

function OnInit(params) {

	htext = CVmTexture("health.png");
	bText = CVmTexture("bullets.png");
	cText = CVmTexture("cup.png");
	mText = CVmTexture("menu.jpg");
	dText = CVmTexture("death.png");
	h90 = CVmTexture("prova3.png");

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.SetParameter(GL_SPOT_EXPONENT, 30);
	Light0.SetParameter(GL_SPOT_CUTOFF, 90);
	Light0.Enable();
	
	ambientLight = CVmLight();
	ambientLight.SetPosition(AmbientPos);
	ambientLight.Enable();
	
	deathTimer = 0;
	
	setFrameRate(60);
	
	networkInit();

	

	// TODO: put your initialization code here
	level = scenario();
	level.init("level.txt");
	
	while(getTime() - loginTimer < LOGIN_TIMEOUT){ 
		var data = networkReceive();
		if(data!= void) {
			/*someone's online */
			if (data[0] == HEARTBEAT_PDU){
				var tmpEnemy = level.getEnemyByID(data[1]);
				if (tmpEnemy == null) {
					/*new player*/
					Outputln("adding enemy");
					var e = level.addPlayer(data[1], [data[2],data[3], data[4]], level);
					level.addEnemy(e);
				}
			}
		}
	}

	Outputln("login terminato");
	enemyNumber = len(level.enemies);
	enemyLastId = maxID();
	playerID = enemyLastId + 1;
	myPlayer = level.addPlayer(playerID, void, level);
	myPlayer.level = level;
	myPlayer.local = true;
	level.myPlayer = myPlayer;

	grabMouse = true;
	ShowCursor(FALSE);
	ShowCursor(FALSE);
}

function showCrosshair()
{
	ConsoleColor([1, 1, 1]);
	ConsoleLines([0.5, 0.47, 0.5, 0.53]);
	ConsoleLines([0.48, 0.5, 0.52, 0.5]);
}

function drawMenu() {
	
	
	
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT | GL_COLOR_BUFFER_BIT  | GL_ENABLE_BIT );
	glDisable(GL_LIGHTING);
	
	glEnable(GL_BLEND);
	
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
		glLoadIdentity();
		glOrtho(0, 40, 0, 30, -1.0, 1.0);
		glMatrixMode(GL_MODELVIEW);
		glPushMatrix();
			glColor([1, 1, 1, 1]);
			SetActiveTexture(mText);
			drawRect(0, 0, 40, 40);
			glColor([1, 1, 1, 0.6]);
			glLoadIdentity();
			glBegin(GL_QUADS);
			glVertex(0,  3, 0.0);
			glVertex(40, 3, 0.0);
			glVertex(40, 23, 0.0);
			glVertex(0, 23, 0.0);
			glEnd();
	glPopMatrix();

	
	glMatrixMode(GL_PROJECTION);
	glEnable(GL_LIGHTING);
	glPopMatrix();
	glPopAttrib();
	glDisable(GL_BLEND);
	
	
	var x = 0.3;
	var y = 0.8;
	ConsoleColor([0.93, 0.92, 0.55]);
	ConsoleFont("Tahoma", 40);
	ConsoleText(x + 0.025, y , "CONTROLS" );
	ConsoleFont("Arial", 18);
	ConsoleText(x - 0.1, y - 0.07 , "Left Mouse Button" );
	ConsoleText(x + 0.3, y - 0.07 , "Shoot" );
	ConsoleText(x - 0.1, y - 0.12 , "Spacebar" );
	ConsoleText(x + 0.3, y - 0.12 , "Jump" );
	ConsoleText(x - 0.1, y - 0.17 , "1" );
	ConsoleText(x + 0.3, y - 0.17 , "Change Weapon" );
	ConsoleText(x - 0.1, y - 0.22 , "R" );
	ConsoleText(x + 0.3, y - 0.22 , "Reload" );
	ConsoleText(x - 0.1, y - 0.27 , "W" );
	ConsoleText(x + 0.3, y - 0.27 , "Walk Forward" );
	ConsoleText(x - 0.1, y - 0.32 , "S" );
	ConsoleText(x + 0.3, y - 0.32 , "Walk Backwards" );
	ConsoleText(x - 0.1, y - 0.37 , "A" );
	ConsoleText(x + 0.3, y - 0.37 , "Walk Left" );
	ConsoleText(x - 0.1, y - 0.42 , "D" );
	ConsoleText(x + 0.3, y - 0.42 , "Walk right" );
	ConsoleText(x - 0.1, y - 0.47 , "SHIFT" );
	ConsoleText(x + 0.3, y - 0.47 , "Run" );	
	ConsoleText(x - 0.1, y - 0.52 , "T" );
	ConsoleText(x + 0.3, y - 0.52 , "Third Person Camera" );
	ConsoleText(x - 0.1, y - 0.57 , "F" );
	ConsoleText(x + 0.3, y - 0.57 , "First Person Camera" );
	ConsoleText(0.25, y - 0.65 , "PRESS ENTER TO CONTINUE" );
}

function showStats() {
	ConsoleColor([1,1,1]);
	ConsoleFont("Arial", 18);
	if (!myPlayer.isReloading){
		ConsoleText(0.45, 0.06, str(myPlayer.weapons[myPlayer.currWeapon].bullets) + " / "+ str(myPlayer.magazines[myPlayer.currWeapon]) );
	}
	else {
		ConsoleText(0.45,0.06, "-- / "+ str(myPlayer.magazines[myPlayer.currWeapon]) );
	}
	
	ConsoleText(0.17, 0.06,str(myPlayer.health));
	ConsoleText(0.71, 0.06,str(myPlayer.score));
}

function showScores() {
	var x = 0.65;
	var y = 0.95;
	ConsoleFont("Arial", 20);
	ConsoleColor(myPlayer.color);

	ConsoleText(x, y , "Player ID: " + str(level.myPlayer.ID) + "   "+ "Score: " + str(level.myPlayer.score));
	ConsoleLines([x, y - 0.01, x + 0.32, y - 0.01]);
	y-= 0.05;
	foreach (var e in level.enemies) {
		ConsoleColor(e.color);
		ConsoleText(x, y , "Player ID: " + str(e.ID) + "   "+ "Score: " + str(e.score));
		ConsoleLines([x, y - 0.01, x + 0.32, y - 0.01]);
		y-= 0.05;
	}
}

function OnFrame() {
	static var started = false;
	
	if(showMenu) {
		SceneBegin();
		drawMenu();
		
		if(Keypressed(VK_RETURN)) {
			showMenu = false;
		}
		
		SceneEnd();
	}
	
	
	else {	
		if(!started) {
			started = true;
			level.startTime = getTime();
		}
		started = true;
		
		/*release/grab mouse */
		static var esc_pressed = false;
		if (KeyPressed(VK_ESCAPE) && !esc_pressed)
		{
			esc_pressed = true;
			GrabMouse = !GrabMouse;
			ShowCursor(!GrabMouse);
		}
		else if (!(KeyPressed(VK_ESCAPE)))
			esc_pressed = false;
			
		level.update();
		showCrosshair();
		
		
		if(Keypressed(VK_CONTROL)) {
			showScores();
		}
		
		/*weapon light update */
		Light0.SetPosition(Level.myPlayer.Position);
		
		/*keep cursor centered */
		if(grabMouse)
			SetCursorPos(0.5, 0.5);	
		
	
		SceneBegin();
		level.draw();
		showBar();
		updateBlood();
		showStats();	
		SceneEnd();
	}
		
}

function DownloadReady(RequestID) {
	// TODO
}



function OnTimer() {
	// TODO:
}


function OnEvent(eventID, wparam, lparam) {
	// TODO: put your events handling code here
}

function OnError() {
	// TODO: put your errors handling code here
}


function OnExit() {
	// TODO: put your cleanup code here
	var PDU = Array(3);
	PDU[0] = DISCONNECT_PDU;
	PDU[1] = myPlayer.ID;
	PDU[2] = level.packetNumbers[DISCONNECT_PDU];
	networkSend(PDU);
	level.packetNumbers[DISCONNECT_PDU]++;
}


function showBar() {
	
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT );
	glDisable(GL_LIGHTING);
	glEnable(GL_BLEND);
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
		glLoadIdentity();
		glOrtho(0, 40, 0, 30, -1.0, 1.0);
		glMatrixMode(GL_MODELVIEW);
		glPushMatrix();
			glLoadIdentity();
			glColor([0.89, 0.47, 0.2, 0.15]);
			glBegin(GL_QUADS);
			glVertex(0, 0, 0.0);
			glVertex(40,0, 0.0);
			glVertex(40, 4, 0.0);
			glVertex(0,4, 0.0);
			glEnd();
				glEnable(GL_TEXTURE_2D);
				glColor([1.0, 1.0, 1.0, 1]);
				SetActiveTexture(hText);
				drawRect(3.5, 1.0, 6.5, 3.4);
				SetActiveTexture(bText);
				drawRect(15, 1.0, 17.5, 3.5);
				SetActiveTexture(cText);
				drawRect(25, 1.0, 27.5, 3.5);
		glPopMatrix();
	
	glMatrixMode(GL_PROJECTION);
	glEnable(GL_LIGHTING);
	glPopMatrix();
	glPopAttrib();
	glDisable(GL_BLEND);

}

function drawRect(minx, miny, maxx, maxy){
	glBegin(GL_QUADS);
	glTexCoord(0.0, 1.0);
	glVertex(minx, miny, 0.0);
	glTexCoord(1.0, 1.0);
	glVertex(maxx, miny, 0.0);
	glTexCoord(1.0, 0.0);
	glVertex(maxx, maxy, 0.0);
	glTexCoord(0.0, 0.0);
	glVertex(minx, maxy, 0.0);
	glEnd();
}

function updateScreen() {
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	glDisable(GL_LIGHTING);
	glColor([0, 0, 0]);
	
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
		glLoadIdentity();
		glOrtho(0, 40, 0, 30, -1.0, 1.0);
		glMatrixMode(GL_MODELVIEW);
		glPushMatrix();
			glLoadIdentity();
			glBegin(GL_QUADS);
			glVertex(0, 0, 0.0);
			glVertex(40,0, 0.0);
			glVertex(40, 40, 0.0);
			glVertex(0,40, 0.0);
			glEnd();
			glEnable(GL_TEXTURE_2D);
				glColor([1.0, 1.0, 1.0, 1.0]);
				SetActiveTexture(dText);
				drawRect(10, 5, 30, 20);
				glColor([0.75, 0.94, 1, 0.2]);
			glPopMatrix();

		glMatrixMode(GL_PROJECTION);
	glEnable(GL_LIGHTING);
	glPopMatrix();
	glPopAttrib();
}

function updateBlood() {
		glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
		glDisable(GL_LIGHTING);
		glEnable(GL_BLEND);
	
		glMatrixMode(GL_PROJECTION);
		glPushMatrix();
			glLoadIdentity();
			glOrtho(0, 40, 0, 30, -1.0, 1.0);
			glMatrixMode(GL_MODELVIEW);
			glPushMatrix();
				glLoadIdentity();
				var transparency = 1- (myPlayer.health / 100);
				glColor([1, 0, 0, transparency]);
				SetActiveTexture(h90);
				drawRect(0, 0, 40, 30);
			glPopMatrix();
		glMatrixMode(GL_PROJECTION);
		glEnable(GL_LIGHTING);
		glPopMatrix();
		glDisable(GL_BLEND);
		glPopAttrib();
	
}




