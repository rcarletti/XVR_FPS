/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "bullet.s3d"
#include "player.s3d"
#include "scenario.s3d"
#include "weapon.s3d"

/* Set global scene parameters */
SET AUDIO_OPENAL = 1;


/* Light globals */
var Light0;
var PosL = [16.0, 10.0, 16.0];

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);
function showCrosshair();

var mylevel;
var myplayer1;
var myplayer2;

function OnDownload() {
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}

function OnInit(params) {

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	

	// TODO: put your initialization code here
	mylevel = scenario();
	mylevel.init("level.txt");

	mylevel.AddPlayer([11,5,0]);
	//
	
	ShowCursor(FALSE);
	ShowCursor(FALSE);
	//mylevel.AddPlayer([2,1,10]);

	
}

function showCrosshair()
{
	ConsoleColor([1, 1, 1]);
	ConsoleLines([0.5, 0.47, 0.5, 0.53]);
	ConsoleLines([0.48, 0.5, 0.52, 0.5]);
}

function OnFrame() {
	/* manage camera */
	//CameraMoveMouse();
	
	mylevel.update();
	showCrosshair();

	SceneBegin(VR_SHOW_STATS);

	//DrawGrid([0.5, 0.5, 0.5], 100);
	

	// TODO: put your drawing code here
	mylevel.draw();
	
	var bullet0pos = mylevel.playerArray[0].playerBullet.position;
	var player1pos = mylevel.playerArray[0].position;
	
	#define HIT_RANGE 0.2
	/*if (mylevel.playerArray[0].playerBullet.life > 0
	&&	bullet0pos.x >= player1pos.x - HIT_RANGE 
	&&  bullet0pos.x <= player1pos.x + HIT_RANGE	
	&&  bullet0pos.z <= player1pos.z + HIT_RANGE
	&&  bullet0pos.z >= player1pos.z - HIT_RANGE
	)			
	{
		outputln("COLPITO");
		mylevel.playerArray[0].score++;
		mylevel.playerArray[0].playerBullet.life = 0;
		mylevel.playerArray[1].hit = true;
		mylevel.playerArray[1].sfxHit.Play();
	}*/
	
	//keep cursor centered
	SetCursorPos(0.5, 0.5);

	SceneEnd();
}

function DownloadReady(RequestID) {
	// TODO
}



function OnTimer() {
	// TODO:
}


function OnEvent(eventID, wparam, lparam) {
	// TODO: put your events handling code here
}

function OnError() {
	// TODO: put your errors handling code here
}


function OnExit() {
	// TODO: put your cleanup code here
}


function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}



