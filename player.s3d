
#define SWAT_START_WALK 16
#define SWAT_END_WALK   48


class player
{
	/*graphics and sounds*/
	var lowerMesh;
	var upperMesh;
	var railgunMesh;
	var lowerObj;
	var upperObj;
	var railgunObj;
	var rootObj;
	var billboardFire;
	var fireObj;
	var sfxStep;
	var sfxShoot;
	var sfxHit;
	var sfxJam;
	var currentFrame;	
	
	/*movement*/
	
	var position;
	var direction;
	var angleY;
	var angleX;
	var speed;
	var angSpeedX;
	var angSpeedY;
	var toward;
	var speedMultiplier;
	var isWalking;
	var levelMatrix;
	var upperRotation;
	
	/*attributes */
	var id;
	var color;
	var playerBullet;
	var score;
	var hit;
	


	/*functions */
	
	init(id,col,pos, matrix);
	update(matrix);
	draw();
	readKeyboard();
};

//********************************************************************
//INIT PLAYER
//********************************************************************

function player :: init(id, col, pos, matrix){
	id = id;
	color = col;
	position = pos;
	angleY = 0;
	angleX = 0;
	speed = 0.02;
	angSpeedX = 0.1;
	angSpeedY = 0.1;
	currentFrame = SWAT_START_WALK;
	hit = false;
	score = 0;
	toward = 0;
	speedMultiplier = 1;
	isWalking = false;
	levelMatrix = matrix;
	

	//create player image
	rootObj  = CVmObj();
	
	lowerMesh = CVmNewMesh("swat_lower.aam");	
	upperMesh = CVmNewMesh("swat_upper.aam");
	railgunMesh = CVmNewMesh("railgun.aam");
	lowerMesh.Scale(0.045);
	upperMesh.Scale(0.045);
	railgunMesh.Scale(0.045);
	
	lowerObj  = CVmObj(lowerMesh);
	upperObj  = CVmObj(upperMesh);
	railgunObj = CVmObj(railgunMesh);
	
	rootObj.AddChild(lowerObj);
	rootObj.AddChild(upperObj);
	rootObj.AddChild(railgunObj);
	
	//applica il colore a tutte le parti del giocatore
	rootObj.ModulateMaterials(color);
	
	billboardFire = CVmBillboard("flame43.avi");
	fireObj = CVmObj();
	fireObj.LinkToBillboard(billboardFire);
	
	rootObj.SetPosition(position);
	fireObj.SetPosition(position);
	upperObj.SetPivotPoint([0,1.0,0]); 
	railgunObj.SetPivotPoint([0,1.0,0]);
	
	sfxStep = CVmVRAWav("step.wav",true);
	sfxShoot = CVmVRAWav("shoot.wav",true);
	sfxHit = CVmVRAWav("hit.wav",true);
	sfxJam = CVmVrAWav("jam.wav",true);
	
	playerBullet = bullet();
	playerBullet.init(color);
	
	hit = false;
}

//********************************************************************
//DRAW
//********************************************************************

function player::draw()
{
	//railgunObj.DrawBoundingBox(VR_WIREFRAME);
	rootObj.Draw(VR_FRAMENUMBER, currentFrame);
	
	if (hit)
	{
		glEnable(GL_BLEND);
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_COLOR);
		fireObj.Draw();
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
		glDisable(GL_BLEND);
	}
	
	playerBullet.draw();
}

//********************************************************************
//PLAYER UPDATE
//********************************************************************

function player :: update(levelMatrix){
	
	readKeyboard();
	
	//mouse coords
	var mouseDelta = [Mouse.DeltaX, Mouse.DeltaY];
	angleY -= angSpeedY * mouseDelta.x;
	angleX -= angSpeedX * mouseDelta.y;
	
	if (angleX >= 50) {
		angleX = 50;
	}
	
	if (angleX <= -40) {
		angleX = -40;
	}
	
	direction = [sin(angleY * GRAD_TO_RAD), sin(angleX * GRAD_TO_RAD), cos(angleY * GRAD_TO_RAD)];	
	
	playerBullet.update();
	
	//set positions
	rootObj.SetPosition(position);	
	rootObj.SetRotation(angleY,0,1,0);
	upperObj.SetRotation(-angleX,1,0,0);
	railgunObj.SetRotation(-angleX, 1,0,0);
	fireObj.SetPosition(position + [0,1,0]);
	sfxStep.SetPosition(position);
	sfxHit.SetPosition(position);
	sfxShoot.SetPosition(position);
	sfxJam.SetPosition(position);
	sfxStep.SetListenerPosition(CameraGetPosition());
	sfxStep.SetListenerOrientation(-CameraGetDirection());
	
	/*frame update */
	
	if (isWalking) {
		var deltaFrame = 0.25 * speedMultiplier;
		currentFrame += deltaFrame;
		
		if (currentFrame >= SWAT_END_WALK) {
			currentFrame = SWAT_START_WALK;
			sfxStep.Play();
		}
		else if (currentFrame == ((SWAT_END_WALK - SWAT_START_WALK) / 2) + SWAT_START_WALK) {
			sfxStep.Play();
			trace(currentFrame);
		}
		
	}					
}

//********************************************************************
//READ INPUT FROM KEYBOARD 
//********************************************************************

function player :: readKeyboard(){
	
	var strafeDirection = [0, 0, 0];
	var walkDirection = [0, 0, 0];
	isWalking = false;
	speedMultiplier = 1;			

	if (Keypressed("D")) {			//go right
		isWalking = true;
		strafeDirection = VectorRotate(-90, [0,1,0], direction.x_z);
	}
		
	if (Keypressed("A")) {			//go left
		isWalking = true;
		strafeDirection = VectorRotate(90, [0,1,0], direction.x_z);
	}
	
	if (Keypressed(VK_SHIFT)) {		//running
		isWalking = true;
		speedMultiplier = 2;		
	}
	
	if (Keypressed("W")) {			//go forward
		isWalking = true;
		walkDirection = direction.x_z;
	}
	if (Keypressed("S")) {			//go backwards
		isWalking = true;
		walkDirection = - direction.x_z;
	}
	
	if (Keypressed(VK_SPACE)) { 	//shoot
		var bbox = railgunMesh.SubsetGetBoundingBox(0);
		trace(bbox);
		var tmpPos = position + VectorRotate(angleY, [0, 1, 0], [(bbox[0] + bbox[3]) / 2, (bbox[1] + bbox[4]) / 2, bbox[5]]) - [0, 0.3, 0];
		var shot = playerBullet.shoot(tmpPos,direction);
		if (shot == 1) {
			sfxShoot.Play();
		}
		else {
			sfxJam.Play();
		}
	}
	
	var oldPosition = position;
	position += ((strafeDirection + walkDirection) * speed * speedMultiplier);
	
	//TODO: fix this shit
	
	if (levelMatrix[int(position.z)][int(position.x)] == 1)
		position = oldposition;

}