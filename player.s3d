
#define SWAT_START_WALK 16
#define SWAT_END_WALK   48
#define HIT_ANIM_START 40
#define HIT_ANIM_END 0

#include "network.s3d"

#include <weapon.s3d>

SET MAX_HEALTH = 100.0;
SET POSITION_TIMER = 100;
SET BULLETS_TIMER = 100;

class player
{
	/*graphics and sounds*/
	var lowerMesh;
	var upperMesh;
	var railgunMesh;
	var lowerObj;
	var upperObj;
	var weaponObj;
	var rootObj;
	var billboardFire;
	var fireObj;
	var sfxStep;
	var sfxHit;
	var sfxJam;
	var sfxReload;
	var currentFrame;	
	var sfxRailShoot;
	var sfxShotgun;
	var sfxHeadshot;
	var hitLenght;
	
	/*movement*/
	
	var position;
	var direction;
	var angleY;
	var angleX;
	var speed;
	var angSpeedX;
	var angSpeedY;
	var verticalSpeed;
	var toward;
	var speedMultiplier;
	var isWalking;
	var upperRotation;
	var isRunning;
	var walkDirection;
	
	/*attributes */
	var ID;
	var color;
	var score;
	var hit;
	var weapons;
	var currWeapon;
	var bullets;
	var bulletNum;
	var magazines;
	var reloadTimer;
	var isReloading;
	var level;
	var isFalling;
	var health;
	var local;
	var heartbeatTimer;
	var positionTimer;
	var bulletsTimer;
	var isdead;
	var deathTimer;
	var nextHitPktNum;
	var nextKillPktNum;



	/*functions */
	
	init(ID,col,pos);
	update();
	draw();
	readKeyboard();
	swapWeapon(ID);
	spawn();
	hitPlayer();
	deadReckoning();
	bulletsUpdate();
	sendHeartbeats();
	sendData();
	sendBulletsData();
	
};

//********************************************************************
//INIT PLAYER
//********************************************************************

function player :: init(ID, col, pos){
	this.ID = ID;
	color = col;
	position = pos;
	angleY = 0;
	angleX = 0;
	speed = 0.05;
	angSpeedX = 0.1;
	angSpeedY = 0.1;
	verticalSpeed = 0.0;
	currentFrame = SWAT_START_WALK;
	hit = false;
	score = 0;
	toward = 0;
	speedMultiplier = 1;
	isWalking = false;
	weapons = Array(2);
	currWeapon = 0;
	bullets = array(0);
	bulletNum = 0;
	magazines = array(2);
	reloadTimer = 0;
	isReloading = false;
	isFalling = false;
	direction = [0,0,0];
	health = 100.0;
	hitLenght = HIT_ANIM_END;
	heartbeatTimer = 0;
	isRunning = false;
	positionTimer = 0;
	bulletsTimer = 0;
	isDead = false;
	deathTimer = 0;
	nextHitPktNum = 0;
	nextKillPktNum = 0;
	

	lowerMesh = CVmNewMesh("swat_lower.aam");	
	upperMesh = CVmNewMesh("swat_upper.aam");
	railgunMesh = CVmNewMesh("railgun.aam");
	lowerMesh.Scale(0.045);
	upperMesh.Scale(0.045);
	railgunMesh.Scale(0.045);
	
	rootObj  = CVmObj();
	lowerObj  = CVmObj(lowerMesh);
	upperObj  = CVmObj(upperMesh);
	weaponObj = CVmObj();
	
	rootObj.AddChild(lowerObj);
	rootObj.AddChild(upperObj);
	rootObj.AddChild(weaponObj);
	
	rootObj.ModulateMaterials(color);
	
	billboardFire = CVmBillboard("Xplosion.avi", 1, 1);
	fireObj = CVmObj();
	fireObj.LinkToBillboard(billboardFire);
	
	rootObj.SetPosition(position);
	fireObj.SetPosition(position);
	upperObj.SetPivotPoint([0,1.0,0]); 
	weaponObj.SetPivotPoint([0,1.0,0]);
	
	sfxStep = CVmVRAWav("step.wav",true);
	sfxHit = CVmVRAWav("hit.wav",true);
	sfxJam = CVmVrAWav("jam.wav",true);
	sfxReload = CVmVrAWav("shotgun_reload.wav",true);
	sfxRailShoot = CVmVrAWav("railg.wav",true);
	sfxShotgun = CVmVrAWav("shotgun.wav",true);

	weapons[0] = weapon("railgun.aam");
	weapons[1] = weapon("rocketl.aam");
	magazines[0] = 2;
	magazines[1] = 2;
	hit = false;
	swapWeapon(0);

}

//********************************************************************
//DRAW
//********************************************************************

function player::draw()
{
	//railgunObj.DrawBoundingBox(VR_WIREFRAME);
	rootObj.Draw(VR_FRAMENUMBER, currentFrame);
	
	foreach (var b in bullets) {
		b.draw();
	}
	
	if (hitLenght > 0)
	{
		glDisable(GL_LIGHTING);
		glEnable(GL_BLEND);
		glPushAttrib(GL_COLOR_BUFFER_BIT  | GL_ENABLE_BIT  | GL_CURRENT_BIT);
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_COLOR);
		glDisable(GL_DEPTH_TEST);
		FireObj.Draw();
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
		glPopAttrib();
		glEnable(GL_LIGHTING);
		glEnable(GL_DEPTH_TEST);
		hitLenght--;

	}
	

}

//********************************************************************
//PLAYER UPDATE
//********************************************************************

function player :: update(){
	
	if(local) {
		readKeyboard();
		
		/*send heartbeats */
		if(getTime() - heartbeatTimer > HEARTBEAT_TIMEOUT) {
			heartbeatTimer = getTime();
			sendHeartbeats();
		}
		
		/*send position data */
		if((getTime() - positionTimer) > POSITION_TIMER) {
			positionTimer = getTime();
			sendData();
		}
		
		/*send bullets data */
		if((getTime() - bulletsTimer) > BULLETS_TIMER ) {
			bulletsTimer = getTime();
			sendBulletsData();
		}

	}
	
	else {
		deadReckoning();
	}
		
		
	bulletsUpdate();
	
	/*set positions */
	rootObj.SetPosition(position);	
	rootObj.SetRotation(angleY,0,1,0);
	upperObj.SetRotation(-angleX,1,0,0);
	weaponObj.SetRotation(-angleX, 1,0,0);
	fireObj.SetPosition(position + [0,1,0]);
	sfxStep.SetPosition(position);
	sfxHit.SetPosition(position);
	sfxJam.SetPosition(position);
	sfxShotgun.SetPosition(position);
	sfxReload.SetPosition(position);
	sfxRailShoot.SetPosition(position);
	sfxStep.SetListenerPosition(CameraGetPosition());
	sfxStep.SetListenerOrientation(-CameraGetDirection());

}

//********************************************************************
//SEND BULLETS DATA
//********************************************************************

function player :: sendBulletsData() {
	var PDU = Array((bulletNum * 8) + 2);
		PDU[0] = BULLETS_PDU;
		PDU[1] = ID;
		var i = 2;
		foreach (var b in bullets) {
			PDU[i + 0] = b.position.x;
			PDU[i + 1] = b.position.y;
			PDU[i + 2] = b.position.z;
			PDU[i + 3] = b.direction.x;
			PDU[i + 4] = b.direction.y;
			PDU[i + 5] = b.direction.z;
			PDU[i + 6] = b.speed;
			PDU[i + 7] = b.life;
			i += 8;
		}
		
		networkSend(PDU);
}

//********************************************************************
//SEND MOVEMENT DATA
//********************************************************************

function player :: sendData() {
		var PDU = array(14);
		PDU[0] = DATA_PDU;
		PDU[1] = ID;
		PDU[2] = position.x;
		PDU[3] = position.y;
		PDU[4] = position.z;
		PDU[5] = walkDirection.x;
		PDU[6] = walkDirection.y;
		PDU[7] = walkDirection.z;
		PDU[8] = angleX;
		PDU[9] = angleY;
		PDU[10] = currWeapon;
		PDU[11] = health;
		PDU[12] = currentFrame;
		if(isRunning) {
			PDU[13] = 2;
		}
		else if (isWalking) {
			PDU[13] = 1;
		}
		else {
			PDU[13] = 0;
		}
		
		networkSend(PDU);
}

//********************************************************************
//SEND HEARTBEATS
//********************************************************************

function player :: sendHeartbeats() {
			var PDU = array(7);
			PDU[0] = HEARTBEAT_PDU;
			PDU[1] = ID;
			PDU[2] = color.r;
			PDU[3] = color.g;
			PDU[4] = color.b;
			PDU[5] = nextHitPktNum;
			PDU[6] = nextKillPktNum;
			
			networkSend(PDU);
}

//********************************************************************
//UPDATE BULLETS
//********************************************************************

function player ::  bulletsUpdate() {
	for (var i = 0; i < bulletNum; i++) {
		bullets[i].update(level);
		if (bullets[i].life <= 0) {
			adel(bullets, i);
			bulletNum--;
			i--;
		}
	}
}

//********************************************************************
//DEAD RECKONING
//********************************************************************

function player :: deadReckoning(){
	
	if (isRunning) {
		speedMultiplier = 2;
	}
	
	if (isWalking) {
		speedMultiplier = 1;
		position += walkDirection * speed * speedMultiplier;
	}
	
	direction = [sin(angleY * GRAD_TO_RAD), sin(angleX * GRAD_TO_RAD), cos(angleY * GRAD_TO_RAD)];	
	

}
//********************************************************************
//READ INPUT FROM KEYBOARD 
//********************************************************************

function player :: readKeyboard(){
	
	var strafeDirection = [0, 0, 0];
	var frontDirection = [0, 0, 0];
	isWalking = false;
	speedMultiplier = 1;	
	isRunning = false;
	
	var mouseDelta = [Mouse.DeltaX, Mouse.DeltaY];
	angleY -= angSpeedY * mouseDelta.x;
	angleX -= angSpeedX * mouseDelta.y;
		
	if (angleX >= 50) {
		angleX = 50;
	}
		
	if (angleX <= -40) {
		angleX = -40;
	}
		
	direction = [sin(angleY * GRAD_TO_RAD), sin(angleX * GRAD_TO_RAD), cos(angleY * GRAD_TO_RAD)];		
	

	/*go right */
	if (Keypressed("D")) {			
		isWalking = true;
		strafeDirection = VectorRotate(-90, [0,1,0], direction.x_z);
	}
	
	/*go left */
	if (Keypressed("A")) {			
		isWalking = true;
		strafeDirection = VectorRotate(90, [0,1,0], direction.x_z);
	}
	
	/*run */
	if (Keypressed(VK_SHIFT) && !isFalling) {	
		isWalking = true;
		speedMultiplier = 2;	
		isRunning = true;	
	}
	
	/* go forward */
	if (Keypressed("W")) {			
		isWalking = true;
		frontDirection = direction.x_z;
	}
	
	/*go backwards */
	if (Keypressed("S")) {			
		isWalking = true;
		frontDirection = - direction.x_z;
	}

	
	if (Keypressed(VK_SPACE) && !isFalling) {			
		isFalling = true;
		verticalSpeed = 0.12;
	}
	
	/*shoot */
	static var hasShot = false;
	if (Mouse.ButtonL && weapons[currWeapon].bullets > 0 && !hasShot && !isReloading) { 
		hasShot = true;
		bulletNum++;
		weapons[currWeapon].bullets--;
		var tmpBullet = bullet();
		tmpBullet.init([0, 0, 0], weapons[currWeapon].bulletSpeed);
		aadd(bullets, tmpBullet);
		var bbox = railgunMesh.SubsetGetBoundingBox(0);
		var tmpPos = position + VectorRotate(angleY, [0, 1, 0], [(bbox[0] + bbox[3]) / 2, (bbox[1] + bbox[4]) / 2, bbox[5]]) - [0, 0.3, 0];
		var shot = tmpBullet.shoot(tmpPos,direction);
		if (shot == 1 && currWeapon == 1) {
			sfxRailShoot.Play();
		}
		else if (shot == 1 && currWeapon == 0) {
			sfxShotgun.Play();
		}
		else {
			sfxJam.Play();
		}
	}
	else if(!Mouse.ButtonL)
		hasShot = false;
	
	/*swap weapons */
	static var isSwitched = false;
	if(Keypressed("1") && !isSwitched){
		if(currWeapon == 1){
			isSwitched = true;
			swapWeapon(0);
		}
		else{
			swapWeapon(1);
			isSwitched = true;
		}
		
	}
	else if(!Keypressed("1")){
		isSwitched = false;
	}
	
	/*reload */
	if (Keypressed("R") && !isReloading) {	
		if (magazines[currWeapon] > 0) {
			weapons[currWeapon].bullets = weapons[currWeapon].magazineSize;
			magazines[currWeapon]--;
			reloadTimer = getTime();
			isReloading = true;
			sfxReload.Play();
		}	
	}
	
	walkDirection = strafeDirection + frontDirection;
	
	
	/*update position */
	var oldPosition = position;
	position += (walkDirection * speed * speedMultiplier);

	/*check collision */
	var h = level.LevelMatrix[int(position.z)][int(position.x)];	
	if(level.isColliding(position, 0.8)){
		position = oldposition;
	}

	/* update falls and jumps */
	verticalSpeed -= 0.006;
	position.y += verticalSpeed;

	if (position.y > h){
		isFalling = true;
	} else if (position.y <= h) {
		verticalSpeed = 0;
		position.y = h;
		isFalling = false;
	}

	/*get ammos */
	static var isPickingAmmos = false;
	var name = level.isWeaponPresent(position.x, position.z);
	if (name != "" && !isPickingAmmos) {
		isPickingAmmos = true;
		level.pickUpAmmos(position.x, position.z);
		if(name == "railgun.aam" && magazines[0] < 5) {
			magazines[0]++;
		}
		else if ( magazines[1] < 5 && name == "rocketl.aam"){
			magazines[1]++;
		}
	}
	else if(name == "") {
		isPickingAmmos = false;
	}
	
	 /*get health pickup */
	static var isPickingHealth = false;
	if (level.isHealthPackPresent(position.x, position.z) && !isPickingHealth) {
		isPickingHealth = true;
		level.pickUpHealth(position.x, position.z);
		health += 10;
		if(health > 100) {
			health = 100;
		}
	}
	else if (!level.isHealthPackPresent(position.x, position.z) ) {
		isPickingHealth = false;
	}
	
	
	/*frame update */
	
	if (isWalking) {
		var deltaFrame = 0.25 * speedMultiplier;
		currentFrame += deltaFrame;
		
		if (currentFrame >= SWAT_END_WALK) {
			currentFrame = SWAT_START_WALK;
			sfxStep.Play();
		}
		else if (currentFrame == ((SWAT_END_WALK - SWAT_START_WALK) / 2) + SWAT_START_WALK) {
			sfxStep.Play();
		}
		
	}
	
	/*reload update */
	
	if(GetTime() - reloadTimer  > weapons[currWeapon].reloadTime) {
		isReloading = false;
	}
}

//********************************************************************
//SWAP WEAPONS
//********************************************************************

function player :: swapWeapon(weaponID) {
	weaponObj.RemoveChild(weapons[currWeapon].weaponObj);
	currWeapon = weaponID;
	weaponObj.AddChild(weapons[currWeapon].weaponObj);
}

//********************************************************************
//SPAWN PLAYER
//********************************************************************

function player :: spawn() {
	var pos, posx, posz;
	/*spawn outside walls */
	do {		
		posx = rand(level.columns);
		posz = rand(level.rows);
		pos = [posx, 0, posz];
	}
	while(level.isColliding(pos, 0.8));
	health = MAX_HEALTH;
	position = pos;
	hitLenght = 0;
	
	
	Outputln("respawn");
}

//********************************************************************
//HIT PLAYER
//********************************************************************

function player :: hitPlayer() {
	sfxHit.play();
	hitLenght = HIT_ANIM_START;
}